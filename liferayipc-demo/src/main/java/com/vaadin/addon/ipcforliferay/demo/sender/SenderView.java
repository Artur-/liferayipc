package com.vaadin.addon.ipcforliferay.demo.sender;

import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

/**
 * Demo form that supports sending Liferay client side inter-portlet messages to
 * other portlets on the same page.
 *
 * Note that this portlet sends the message in two different ways at the same
 * time to demonstrate different ways to communicate complex data: as a
 * semicolon separated string via the client with the event id "newPerson", and
 * as a Person object in a shared portlet session with just a an internal
 * identifier for it sent via the client with the event id "newPersonInSession".
 *
 * Normal applications only need one of these approaches.
 */
public class SenderView extends CustomComponent {

    private VerticalLayout mainLayout;
    private TextField ageField;
    private TextField lastNameField;
    private TextField firstNameField;
    private Button sendButton;

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public SenderView() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        sendButton.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                // Send the form contents as a Liferay client side IPC message
                String firstName = firstNameField.getValue();
                String lastName = lastNameField.getValue();
                int age = Integer.parseInt(ageField.getValue());

                // Note: this portlet sends the same data in two different ways
                // for different receivers. Normally, only one approach would be
                // used in a portlet, and all receivers would listen to the same
                // channel.

                // simple way of sending all the data via the client
                ((SenderUI) getUI()).sendPersonViaClient(firstName, lastName,
                        age);

                // second way: put the person in a shared session attribute and
                // notify others via client-side IPC
                ((SenderUI) getUI()).sendPersonViaSession(firstName, lastName,
                        age);

                mainLayout.addComponent(new Label("Sent firstName=" + firstName
                        + ", lastName=" + lastName + ", age=" + age));
                firstNameField.clear();
                lastNameField.clear();
                ageField.clear();

            }
        });
    }

    private void buildMainLayout() {
        mainLayout = new VerticalLayout();

        firstNameField = new TextField("First name");

        lastNameField = new TextField("Last name");

        ageField = new TextField("Age");
        ageField.setWidth("40px");

        sendButton = new Button("Send");

        mainLayout.addComponents(firstNameField, lastNameField, ageField,
                sendButton);
    }

}
