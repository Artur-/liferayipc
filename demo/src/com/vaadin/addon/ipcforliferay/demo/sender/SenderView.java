package com.vaadin.addon.ipcforliferay.demo.sender;

import java.io.IOException;

import com.vaadin.addon.ipcforliferay.LiferayIPC;
import com.vaadin.addon.ipcforliferay.demo.SessionAwarePortletApplication;
import com.vaadin.addon.ipcforliferay.demo.SessionAwarePortletApplication.TransferMode;
import com.vaadin.addon.ipcforliferay.demo.data.Person;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TextField;

/**
 * Demo form that supports sending Liferay client side inter-portlet messages to
 * other portlets on the same page.
 * 
 * This portlet sends the message in two different ways at the same time: as a
 * semicolon separated string via the client with the event id "newPerson", and
 * as a Person object in a shared portlet session with just a notification of
 * its availability sent via the client with the event id "newPersonInSession"
 * and no content.
 */
public class SenderView extends CustomComponent {

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private LiferayIPC liferayIPC_1;
    @AutoGenerated
    private TextField ageField;
    @AutoGenerated
    private TextField lastNameField;
    @AutoGenerated
    private TextField firstNameField;
    @AutoGenerated
    private Button button_1;

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /**
     * The constructor should first build the main layout, set the composition
     * root and then do any custom initialization.
     * 
     * The constructor will not be automatically regenerated by the visual
     * editor.
     */
    public SenderView() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        button_1.addListener(new Button.ClickListener() {

            public void buttonClick(ClickEvent event) {
                // Send the form contents as a Liferay client side IPC message
                String firstName = (String) firstNameField.getValue();
                String lastName = (String) lastNameField.getValue();
                int age = Integer.parseInt((String) ageField.getValue());

                // simple way of sending all the data via the client
                sendPersonViaClient(firstName, lastName, age);

                // second way: put the person in a shared session attribute and
                // notify others via client-side IPC
                sendPersonViaSession(firstName, lastName, age);
            }
        });
    }

    /**
     * Send information about a person to other portlets as a suitably formatted
     * (semicolon separated) string using client-side IPC.
     * 
     * @param firstName
     * @param lastName
     * @param age
     */
    private void sendPersonViaClient(String firstName, String lastName, int age) {
        // format the message for easy parsing (semicolon separated)
        // no escaping of semicolons etc. is performed here
        liferayIPC_1.sendEvent("newPerson", firstName + ";" + lastName + ";"
                + age);
    }

    /**
     * Send information about a person to other portlets by putting the person
     * in a shared session attribute and then notifying other portlets of its
     * availability via client-side IPC without sending the actual data via the
     * client.
     * 
     * This requires the sending portlet to be configured for shared session
     * attributes (private-session-attributes must be false in
     * liferay-portlet.xml).
     * 
     * Note that this simple implementation does not handle multiple concurrent
     * senders with different data in each. That can be handled e.g. by
     * providing a suitable identifier for the shared data in the message passed
     * on the client as long as security implications are kept in mind (a
     * malicious client can alter messages and try to e.g. scan for possible
     * keys).
     * 
     * @param firstName
     * @param lastName
     * @param age
     */
    private void sendPersonViaSession(String firstName, String lastName, int age) {
        Person person = new Person(firstName, lastName, age);

        // Put the person object in the session.
        // Note that between portlets in the same WAR, the
        // object could also be passed directly without
        // serializing it.
        try {
            getApplication()
                    .setSessionAttribute("LIFERAY_SHARED_vaadin_person",
                            person, TransferMode.BASE64);
        } catch (IOException e) {
            getWindow().showNotification(
                    "Storing a person in the portlet session failed");
            return;
        }

        // This only notifies listeners that a Person object has been
        // put or updated in the shared session, with no data in the message in
        // this simple implementation.
        liferayIPC_1.sendEvent("newPersonInSession", "");
    }

    @Override
    public SessionAwarePortletApplication getApplication() {
        return (SessionAwarePortletApplication) super.getApplication();
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setWidth("180px");
        mainLayout.setHeight("180px");

        // top-level component properties
        setWidth("180px");
        setHeight("180px");

        // button_1
        button_1 = new Button();
        button_1.setCaption("Add");
        button_1.setImmediate(true);
        button_1.setWidth("-1px");
        button_1.setHeight("-1px");
        mainLayout.addComponent(button_1, "top:140.0px;left:20.0px;");

        // firstNameField
        firstNameField = new TextField();
        firstNameField.setCaption("First name");
        firstNameField.setImmediate(false);
        firstNameField.setWidth("-1px");
        firstNameField.setHeight("-1px");
        mainLayout.addComponent(firstNameField, "top:20.0px;left:20.0px;");

        // lastNameField
        lastNameField = new TextField();
        lastNameField.setCaption("Last name");
        lastNameField.setImmediate(false);
        lastNameField.setWidth("-1px");
        lastNameField.setHeight("-1px");
        mainLayout.addComponent(lastNameField, "top:61.0px;left:20.0px;");

        // ageField
        ageField = new TextField();
        ageField.setCaption("Age");
        ageField.setImmediate(false);
        ageField.setWidth("40px");
        ageField.setHeight("-1px");
        mainLayout.addComponent(ageField, "top:101.0px;left:20.0px;");

        // liferayIPC_1
        liferayIPC_1 = new LiferayIPC();
        liferayIPC_1.setImmediate(false);
        liferayIPC_1.setWidth("-1px");
        liferayIPC_1.setHeight("-1px");
        mainLayout.addComponent(liferayIPC_1, "top:138.0px;left:94.0px;");

        return mainLayout;
    }

}
